name: CodeQL + DefectDojo

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  codeql_analysis:
    name: Analyze with CodeQL
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Perform CodeQL Analysis (no upload to GH)
        uses: github/codeql-action/analyze@v3
        with:
          upload: false
          output: ./codeql-sarif

      - name: Package SARIF(s)
        run: |
          ls -l ./codeql-sarif
          tar -czf sarif.tgz -C ./codeql-sarif .

      - name: Upload SARIF artifact
        uses: actions/upload-artifact@v4
        with:
          name: codeql-sarif
          path: sarif.tgz

  defectdojo_upload:
    name: Ensure Product/Engagement + Upload to DefectDojo
    needs: codeql_analysis
    runs-on: ubuntu-latest
    env:
      DD_URL: ${{ secrets.DD_URL }}
      DD_TOKEN: ${{ secrets.DD_TOKEN }}
      DD_PRODUCT_NAME: ${{ vars.DD_PRODUCT_NAME }}
      DD_PRODUCT_TYPE_NAME: GitHub Actions
    steps:
      - uses: actions/checkout@v4

      - name: Download SARIF artifact
        uses: actions/download-artifact@v4
        with:
          name: codeql-sarif
          path: ./sarif

      - name: Install curl & jq
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Extract SARIF
        run: |
          tar -xzf ./sarif/sarif.tgz -C ./sarif
          SARIF_FILE=$(ls ./sarif/*.sarif | head -n1)
          echo "SARIF_FILE=$SARIF_FILE" >> $GITHUB_ENV

      - name: Smoke check (with auth)
        run: |
          set -euo pipefail
          HTTP_CODE=$(curl -sS -o /dev/null -w "%{http_code}" \
            -H "Authorization: Token $DD_TOKEN" \
            "$DD_URL/api/v2/engagements/?limit=1" || true)
          echo "HTTP_CODE=$HTTP_CODE"
          [[ "$HTTP_CODE" =~ ^2 ]] || { echo "DefectDojo inaccesible o token inválido"; exit 2; }

      - name: Ensure ProductType + Product + Engagement, then upload
        run: |
          set -euo pipefail

          PRODUCT="${DD_PRODUCT_NAME:-$GITHUB_REPOSITORY}"
          PTYPE="${DD_PRODUCT_TYPE_NAME:-GitHub Actions}"
          ENG_NAME="CodeQL_${GITHUB_REF_NAME}"
          TODAY=$(date +%F)

          echo "Producto objetivo: '$PRODUCT' | Tipo: '$PTYPE' | Engagement: '$ENG_NAME'"

          # -------- Buscar/crear Product Type --------
          PTYPE_ID=$(curl -sS -G -H "Authorization: Token $DD_TOKEN" \
            --data-urlencode "name=$PTYPE" \
            "$DD_URL/api/v2/product_types/" | jq -r '.results[0].id // empty')

          if [ -z "$PTYPE_ID" ]; then
            echo "ProductType no existe, intentando crearlo…"
            HTTP_CODE=$(curl -sS -o pt.json -w "%{http_code}" -X POST \
              -H "Authorization: Token $DD_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"name\":\"$PTYPE\"}" \
              "$DD_URL/api/v2/product_types/" || true)
            if [[ "$HTTP_CODE" =~ ^2 ]]; then
              PTYPE_ID=$(jq -r '.id' pt.json)
            else
              echo "No pude crear ProductType ($HTTP_CODE). Usaré modo 'names' (auto_create_context)."
              UPLOAD_MODE="names"
            fi
          fi

          # -------- Buscar/crear Product --------
          if [ "${UPLOAD_MODE:-}" != "names" ]; then
            PROD_ID=$(curl -sS -G -H "Authorization: Token $DD_TOKEN" \
              --data-urlencode "name=$PRODUCT" \
              "$DD_URL/api/v2/products/" | jq -r '.results[0].id // empty')

            if [ -z "$PROD_ID" ]; then
              echo "Product no existe, intentando crearlo…"
              HTTP_CODE=$(curl -sS -o prod.json -w "%{http_code}" -X POST \
                -H "Authorization: Token $DD_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{\"name\":\"$PRODUCT\",\"prod_type\":$PTYPE_ID}" \
                "$DD_URL/api/v2/products/" || true)
              if [[ "$HTTP_CODE" =~ ^2 ]]; then
                PROD_ID=$(jq -r '.id' prod.json)
              else
                echo "No pude crear Product ($HTTP_CODE). Usaré modo 'names' (auto_create_context)."
                UPLOAD_MODE="names"
              fi
            fi
          fi

          # -------- Buscar/crear Engagement --------
          if [ "${UPLOAD_MODE:-}" != "names" ]; then
            ENG_ID=$(curl -sS -G -H "Authorization: Token $DD_TOKEN" \
              --data-urlencode "name=$ENG_NAME" \
              --data-urlencode "product=$PROD_ID" \
              "$DD_URL/api/v2/engagements/" | jq -r '.results[0].id // empty')

            if [ -z "$ENG_ID" ]; then
              echo "Engagement no existe, creándolo…"
              HTTP_CODE=$(curl -sS -o eng.json -w "%{http_code}" -X POST \
                -H "Authorization: Token $DD_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{\"name\":\"$ENG_NAME\",\"product\":$PROD_ID,\"status\":\"In Progress\",\"target_start\":\"$TODAY\",\"target_end\":\"$TODAY\",\"active\":true}" \
                "$DD_URL/api/v2/engagements/" || true)
              if [[ "$HTTP_CODE" =~ ^2 ]]; then
                ENG_ID=$(jq -r '.id' eng.json)
              else
                echo "No pude crear Engagement ($HTTP_CODE). Cambio a modo 'names'."
                UPLOAD_MODE="names"
              fi
            fi
          fi

          echo "UPLOAD_MODE=${UPLOAD_MODE:-engagement}"
          echo "PTYPE_ID=${PTYPE_ID:-}" ; echo "PROD_ID=${PROD_ID:-}" ; echo "ENG_ID=${ENG_ID:-}"

          # -------- Subir scan --------
          if [ "${UPLOAD_MODE:-}" = "names" ]; then
            echo "Subiendo con auto_create_context=true (product/engagement por nombre)…"
            HTTP_CODE=$(curl -sS -o resp.json -w "%{http_code}" -X POST "$DD_URL/api/v2/reimport-scan/" \
              -H "Authorization: Token $DD_TOKEN" \
              -H "accept: application/json" \
              -H "Content-Type: multipart/form-data" \
              -F "file=@${SARIF_FILE};type=application/sarif+json" \
              -F "scan_type=SARIF" \
              -F "product_name=${PRODUCT}" \
              -F "product_type_name=${PTYPE}" \
              -F "engagement_name=${ENG_NAME}" \
              -F "active=true" \
              -F "auto_create_context=true" \
              -F "deduplication_on_engagement=true" \
              -F "close_old_findings=true" \
              -F "branch_tag=${GITHUB_REF_NAME}" \
              -F "build_id=${GITHUB_RUN_NUMBER}" \
              -F "commit_hash=${GITHUB_SHA}" || true)
          else
            echo "Subiendo contra Engagement ID=${ENG_ID}…"
            HTTP_CODE=$(curl -sS -o resp.json -w "%{http_code}" -X POST "$DD_URL/api/v2/reimport-scan/" \
              -H "Authorization: Token $DD_TOKEN" \
              -H "accept: application/json" \
              -H "Content-Type: multipart/form-data" \
              -F "file=@${SARIF_FILE};type=application/sarif+json" \
              -F "scan_type=SARIF" \
              -F "engagement=${ENG_ID}" \
              -F "deduplication_on_engagement=true" \
              -F "close_old_findings=true" \
              -F "branch_tag=${GITHUB_REF_NAME}" \
              -F "build_id=${GITHUB_RUN_NUMBER}" \
              -F "commit_hash=${GITHUB_SHA}" || true)
          fi

          echo "HTTP_CODE=$HTTP_CODE"
          jq . resp.json || cat resp.json
          [[ "$HTTP_CODE" =~ ^2 ]] || exit 1
