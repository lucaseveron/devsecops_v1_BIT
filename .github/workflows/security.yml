name: "CodeQL Analysis"

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  # schedule:
  #   - cron: '0 3 * * 1'  # Lunes 3AM UTC

jobs:
  codeql_analysis:
    name: Analyze Code with CodeQL
    runs-on: self-hosted

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Runner sanity
        run: |
          echo "Runner: $RUNNER_NAME ($RUNNER_OS/$RUNNER_ARCH)"
          echo "Repo: $GITHUB_REPOSITORY  Ref: $GITHUB_REF  Actor: $GITHUB_ACTOR"
          # Evitar imprimir variables sensibles
          echo "--- ENV (sanitizado) ---"
          env | sort | grep -Ev 'DEFECTDOJO_TOKEN|DEFECTDOJO_URL|TOKEN|SECRET' | head -n 30

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: "python"  # ajusta según tu proyecto

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: codeql-results.sarif

      - name: Upload CodeQL results as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: codeql-results
          path: codeql-results.sarif

  codeql_create_engagement:
    name: Create engagement in DefectDojo - CodeQL
    needs: codeql_analysis
    if: always()
    runs-on: self-hosted

    env:
      # ⚠️ Respetando tus valores actuales (en claro para prueba rápida)
      DEFECTDOJO_URL: "http://107.21.152.191:8080"
      DEFECTDOJO_TOKEN: "2ff51b58d24988ccb47580fd79dab1a95d193ff7"

      # Config engagement
      DEFECTDOJO_ENGAGEMENT_PERIOD: "28"
      DEFECTDOJO_ENGAGEMENT_STATUS: "In Progress"
      DEFECTDOJO_ENGAGEMENT_BUILD_SERVER: "null"
      DEFECTDOJO_ENGAGEMENT_SOURCE_CODE_MANAGEMENT_SERVER: "null"
      DEFECTDOJO_ENGAGEMENT_ORCHESTRATION_ENGINE: "null"
      DEFECTDOJO_ENGAGEMENT_DEDUPLICATION_ON_ENGAGEMENT: "true"
      DEFECTDOJO_ENGAGEMENT_THREAT_MODEL: "true"
      DEFECTDOJO_ENGAGEMENT_API_TEST: "true"
      DEFECTDOJO_ENGAGEMENT_PEN_TEST: "true"
      DEFECTDOJO_ENGAGEMENT_CHECK_LIST: "true"
      DEFECTDOJO_PRODUCTID: "1"

    steps:
      - name: Runner sanity
        run: |
          echo "Runner: $RUNNER_NAME ($RUNNER_OS/$RUNNER_ARCH)"
          echo "Repo: $GITHUB_REPOSITORY  Ref: $GITHUB_REF  Actor: $GITHUB_ACTOR"
          # Evitar imprimir variables sensibles
          echo "--- ENV (sanitizado) ---"
          env | sort | grep -Ev 'DEFECTDOJO_TOKEN|DEFECTDOJO_URL|TOKEN|SECRET' | head -n 30

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq coreutils

      - name: Set engagement dates (UTC)
        run: |
          echo "TODAY=$(date -u +%Y-%m-%d)" >> $GITHUB_ENV
          echo "ENDDAY=$(date -u -d '+${DEFECTDOJO_ENGAGEMENT_PERIOD:-28} days' +%Y-%m-%d)" >> $GITHUB_ENV

      - name: Sanity check DefectDojo connectivity
        run: |
          set -e
          curl -fsS "${DEFECTDOJO_URL}/api/v2/engagements/?limit=1" \
            -H "Authorization: Token ${DEFECTDOJO_TOKEN}" \
            -H "Accept: application/json" -o /dev/null
          echo "✅ Conexión con Dojo OK"

      - name: Create engagement in DefectDojo (jq)
        id: create_engagement
        shell: bash
        run: |
          set -euo pipefail

          DESC="${{ github.event.head_commit.message }}"
          if [ -z "$DESC" ]; then DESC="${{ github.event.pull_request.title }}"; fi
          if [ -z "$DESC" ]; then DESC="CodeQL run"; fi

          payload=$(jq -n \
            --arg name "CodeQL_#${{ github.run_id }}" \
            --arg description "$DESC" \
            --arg version "${{ github.ref }}" \
            --arg first_contacted "${TODAY}" \
            --arg target_start "${TODAY}" \
            --arg target_end "${ENDDAY}" \
            --arg reason "Automated engagement" \
            --arg tracker "https://github.com/${{ github.repository }}" \
            --arg status "${DEFECTDOJO_ENGAGEMENT_STATUS}" \
            --arg build_id "${{ github.run_id }}" \
            --arg commit_hash "${{ github.sha }}" \
            --arg branch_tag "${{ github.ref_name }}" \
            --arg scm_uri "https://github.com/${{ github.repository }}" \
            --argjson product ${DEFECTDOJO_PRODUCTID} \
            --argjson threat_model ${DEFECTDOJO_ENGAGEMENT_THREAT_MODEL} \
            --argjson api_test ${DEFECTDOJO_ENGAGEMENT_API_TEST} \
            --argjson pen_test ${DEFECTDOJO_ENGAGEMENT_PEN_TEST} \
            --argjson check_list ${DEFECTDOJO_ENGAGEMENT_CHECK_LIST} \
            --argjson dedup ${DEFECTDOJO_ENGAGEMENT_DEDUPLICATION_ON_ENGAGEMENT} \
            --argjson build_server ${DEFECTDOJO_ENGAGEMENT_BUILD_SERVER} \
            --argjson scm_server ${DEFECTDOJO_ENGAGEMENT_SOURCE_CODE_MANAGEMENT_SERVER} \
            --argjson orch_engine ${DEFECTDOJO_ENGAGEMENT_ORCHESTRATION_ENGINE} \
            '{
              tags: ["GitHub Actions"],
              name: $name,
              description: $description,
              version: $version,
              first_contacted: $first_contacted,
              target_start: $target_start,
              target_end: $target_end,
              reason: $reason,
              tracker: $tracker,
              test_strategy: null,
              threat_model: $threat_model,
              api_test: $api_test,
              pen_test: $pen_test,
              check_list: $check_list,
              status: $status,
              engagement_type: "CI/CD",
              build_id: $build_id,
              commit_hash: $commit_hash,
              branch_tag: $branch_tag,
              source_code_management_uri: $scm_uri,
              deduplication_on_engagement: $dedup,
              product: $product,
              build_server: $build_server,
              source_code_management_server: $scm_server,
              orchestration_engine: $orch_engine
            }')

          echo "$payload" > payload.json
          echo "Payload listo:"
          cat payload.json

          resp=$(curl -fsS -X POST "${DEFECTDOJO_URL}/api/v2/engagements/" \
            -H "Authorization: Token ${DEFECTDOJO_TOKEN}" \
            -H "Content-Type: application/json" \
            --data @payload.json)

          echo "$resp" | tee id.json
          ENGAGEMENT_ID=$(jq -r '.id // empty' id.json)
          if [[ -z "$ENGAGEMENT_ID" ]]; then
            echo "⚠️ No se obtuvo ID. Respuesta de la API arriba ↑"
            exit 1
          fi

          echo "DEFECTDOJO_ENGAGEMENTID=${ENGAGEMENT_ID}" | tee -a defectdojo1.env
          echo "engagement_id=${ENGAGEMENT_ID}" >> "$GITHUB_OUTPUT"
          echo "✅ Engagement creado: ID=${ENGAGEMENT_ID}"

      - name: Upload debug artifacts (payload & id)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: defectdojo-debug
          path: |
            payload.json
            id.json

      - name: Upload defectdojo1.env
        uses: actions/upload-artifact@v4
        with:
          name: defectdojo1-env
          path: defectdojo1.env

